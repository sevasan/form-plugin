/* The following code was generated by JFlex 1.4.3 on 3/7/16 4:27 PM */

package com.form.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/7/16 4:27 PM from the specification file
 * <tt>C:/development/form-plugin/lang/src/com/form/lang/lexer/Form.flex</tt>
 */
class _FormLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int DIRECTIVE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\0\1\4\23\0\1\4\1\0\1\13\1\42"+
    "\3\0\1\12\1\57\1\60\1\2\1\61\1\66\1\62\1\56\1\63"+
    "\1\11\11\1\1\0\1\67\1\0\1\65\1\0\1\70\1\0\2\5"+
    "\1\36\2\5\1\34\2\5\1\30\2\5\1\55\1\5\1\40\1\5"+
    "\1\54\2\5\1\14\1\37\1\5\1\23\4\5\1\7\1\0\1\10"+
    "\1\64\1\5\1\71\1\43\1\17\1\25\1\32\1\24\1\41\1\52"+
    "\1\47\1\33\1\5\1\45\1\21\1\16\1\31\1\20\1\44\1\5"+
    "\1\27\1\22\1\26\1\35\1\53\1\50\1\51\1\15\1\46\3\0"+
    "\1\72\53\0\1\5\12\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\201\0\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0"+
    "\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\10\0"+
    "\236\5\11\0\46\5\2\0\1\5\7\0\47\5\110\0\33\5\5\0"+
    "\3\5\55\0\53\5\25\0\12\6\4\0\2\5\1\0\143\5\1\0"+
    "\1\5\17\0\2\5\7\0\2\5\12\6\3\5\2\0\1\5\20\0"+
    "\1\5\1\0\36\5\35\0\131\5\13\0\1\5\16\0\12\6\41\5"+
    "\11\0\2\5\4\0\1\5\5\0\26\5\4\0\1\5\11\0\1\5"+
    "\3\0\1\5\27\0\31\5\107\0\1\5\1\0\13\5\127\0\66\5"+
    "\3\0\1\5\22\0\1\5\7\0\12\5\4\0\12\6\1\0\7\5"+
    "\1\0\7\5\5\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\3\0\1\5\20\0\1\5\15\0\2\5"+
    "\1\0\3\5\4\0\12\6\2\5\23\0\6\5\4\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5\37\0"+
    "\4\5\1\0\1\5\7\0\12\6\2\0\3\5\20\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\22\0\1\5\17\0\2\5\4\0\12\6\25\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\3\0"+
    "\1\5\36\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\21\0"+
    "\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0"+
    "\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\26\0"+
    "\1\5\25\0\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0"+
    "\12\5\1\0\5\5\3\0\1\5\32\0\2\5\6\0\2\5\4\0"+
    "\12\6\25\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0"+
    "\5\5\3\0\1\5\40\0\1\5\1\0\2\5\4\0\12\6\1\0"+
    "\2\5\22\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\20\0"+
    "\1\5\21\0\2\5\4\0\12\6\12\0\6\5\5\0\22\5\3\0"+
    "\30\5\1\0\11\5\1\0\1\5\2\0\7\5\72\0\60\5\1\0"+
    "\2\5\14\0\7\5\11\0\12\6\47\0\2\5\1\0\1\5\2\0"+
    "\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0"+
    "\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\0"+
    "\2\5\11\0\1\5\2\0\5\5\1\0\1\5\11\0\12\6\2\0"+
    "\4\5\40\0\1\5\37\0\12\6\26\0\10\5\1\0\44\5\33\0"+
    "\5\5\163\0\53\5\24\0\1\5\12\6\6\0\6\5\4\0\4\5"+
    "\3\0\1\5\3\0\2\5\7\0\3\5\4\0\15\5\14\0\1\5"+
    "\1\0\12\6\6\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5"+
    "\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5"+
    "\2\0\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5"+
    "\1\0\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5"+
    "\2\0\103\5\45\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5"+
    "\1\0\32\5\5\0\113\5\25\0\15\5\1\0\4\5\16\0\22\5"+
    "\16\0\22\5\16\0\15\5\1\0\3\5\17\0\64\5\43\0\1\5"+
    "\4\0\1\5\3\0\12\6\46\0\12\6\6\0\130\5\10\0\51\5"+
    "\1\0\1\5\5\0\106\5\12\0\35\5\51\0\12\6\36\5\2\0"+
    "\5\5\13\0\54\5\25\0\7\5\10\0\12\6\46\0\27\5\11\0"+
    "\65\5\53\0\12\6\6\0\12\6\15\0\1\5\135\0\57\5\21\0"+
    "\7\5\4\0\12\6\51\0\36\5\15\0\2\5\12\6\54\5\32\0"+
    "\44\5\34\0\12\6\3\0\3\5\12\6\44\5\153\0\4\5\1\0"+
    "\4\5\3\0\2\5\11\0\300\5\100\0\u0116\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\164\0\1\5\15\0\1\5\20\0\15\5\145\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0"+
    "\4\5\5\0\5\5\4\0\1\5\64\0\2\5\u0a7b\0\57\5\1\0"+
    "\57\5\1\0\205\5\6\0\4\5\3\0\2\5\14\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\70\5\7\0\1\5\20\0\27\5\11\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\120\0\1\5\u01d5\0\2\5\52\0"+
    "\5\5\5\0\2\5\4\0\126\5\6\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0"+
    "\20\5\12\6\2\5\24\0\57\5\20\0\31\5\10\0\106\5\61\0"+
    "\11\5\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5\115\0"+
    "\12\5\1\0\3\5\1\0\4\5\1\0\27\5\35\0\64\5\16\0"+
    "\62\5\34\0\12\6\30\0\6\5\3\0\1\5\4\0\12\6\34\5"+
    "\12\0\27\5\31\0\35\5\7\0\57\5\34\0\1\5\12\6\46\0"+
    "\51\5\27\0\3\5\1\0\10\5\4\0\12\6\6\0\27\5\3\0"+
    "\1\5\5\0\60\5\1\0\1\5\3\0\2\5\2\0\5\5\2\0"+
    "\1\5\1\0\1\5\30\0\3\5\2\0\13\5\7\0\3\5\14\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0"+
    "\43\5\15\0\12\6\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0"+
    "\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\0"+
    "\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0"+
    "\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0"+
    "\14\5\164\0\5\5\1\0\207\5\23\0\12\6\7\0\32\5\6\0"+
    "\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\3\1\11\1\12\11\6\1\2\2\6\1\2"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\2\30\1\31\1\30"+
    "\1\1\1\32\1\0\6\6\1\33\1\34\5\6\17\0"+
    "\2\6\4\0\1\35\2\6\1\36\11\6\23\0\1\37"+
    "\2\0\1\40\11\0\2\6\5\0\2\6\1\41\7\6"+
    "\44\0\1\42\6\0\2\6\2\0\1\43\2\0\3\6"+
    "\1\44\6\6\10\0\1\45\1\0\1\46\12\0\1\47"+
    "\1\50\30\0\1\51\1\0\1\52\1\53\1\54\3\0"+
    "\2\6\1\55\6\6\1\0\1\56\11\0\1\57\1\0"+
    "\1\60\4\0\1\61\7\0\1\62\7\0\1\63\12\0"+
    "\1\64\1\65\1\66\1\0\1\67\1\70\1\71\3\6"+
    "\1\72\1\6\4\0\1\73\3\0\1\74\1\75\10\0"+
    "\1\76\4\0\1\77\2\0\1\100\1\0\1\101\1\0"+
    "\1\102\5\0\1\103\1\104\1\0\1\105\1\0\1\106"+
    "\2\6\1\107\1\110\1\111\1\112\23\0\1\113\1\114"+
    "\7\0\1\115\1\6\1\0\1\116\6\0\1\117\1\120"+
    "\7\0\1\121\2\0\1\122\5\0\1\123\2\0\1\124"+
    "\1\0\1\125\1\126\5\0\1\127\7\0\1\130\10\0"+
    "\1\131\1\0\1\132\3\0\1\133\2\0\1\134\1\0"+
    "\1\135\2\0\1\136\2\0\1\137\10\0\1\140\4\0"+
    "\1\141\1\142\5\0\1\143\1\0\1\144\1\0\1\145"+
    "\3\0\1\146\1\0\1\147\1\0\1\150\1\0\1\151"+
    "\2\0\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u0127"+
    "\0\u019d\0\u01d8\0\u0213\0\u0127\0\u0127\0\u0127\0\u0127\0\u024e"+
    "\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426"+
    "\0\u0461\0\u049c\0\u04d7\0\u0512\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u054d\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0127\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u01d8\0\u01d8"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc"+
    "\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4"+
    "\0\u0e0f\0\u0e4a\0\u0127\0\u06ea\0\u0e85\0\u01d8\0\u0ec0\0\u0efb"+
    "\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3"+
    "\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab"+
    "\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483"+
    "\0\u14be\0\u14f9\0\u0127\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620"+
    "\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8"+
    "\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0"+
    "\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8"+
    "\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80"+
    "\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58"+
    "\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5\0\u2130"+
    "\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308"+
    "\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0"+
    "\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607\0\u2642\0\u267d\0\u0127"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u01d8\0\u27df\0\u281a"+
    "\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c\0\u29b7\0\u29f2"+
    "\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u0127\0\u2b19\0\u2b54\0\u2b8f"+
    "\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c\0\u2d67"+
    "\0\u2da2\0\u0127\0\u0127\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9"+
    "\0\u2f04\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1"+
    "\0\u30dc\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279"+
    "\0\u32b4\0\u32ef\0\u332a\0\u0127\0\u3365\0\u01d8\0\u01d8\0\u0127"+
    "\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c\0\u01d8\0\u34c7\0\u3502"+
    "\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664\0\u369f\0\u36da"+
    "\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c\0\u3877\0\u0127"+
    "\0\u38b2\0\u0127\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u0127\0\u3bb1"+
    "\0\u3bec\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u0127\0\u3d4e"+
    "\0\u3d89\0\u3dc4\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26"+
    "\0\u3f61\0\u0127\0\u0127\0\u0127\0\u3f9c\0\u01d8\0\u01d8\0\u01d8"+
    "\0\u3fd7\0\u4012\0\u404d\0\u01d8\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u0127\0\u41af\0\u41ea\0\u4225\0\u0127\0\u0127\0\u4260"+
    "\0\u429b\0\u42d6\0\u4311\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u0127"+
    "\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u0127\0\u4524\0\u455f\0\u0127"+
    "\0\u459a\0\u0127\0\u45d5\0\u0127\0\u4610\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u0127\0\u0127\0\u4737\0\u0127\0\u4772\0\u0127\0\u47ad"+
    "\0\u47e8\0\u01d8\0\u01d8\0\u0127\0\u0127\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\u0127\0\u0127\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab"+
    "\0\u4de6\0\u01d8\0\u4e21\0\u4e5c\0\u0127\0\u4e97\0\u4ed2\0\u4f0d"+
    "\0\u4f48\0\u4f83\0\u4fbe\0\u0127\0\u0127\0\u4ff9\0\u5034\0\u506f"+
    "\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u0127\0\u5196\0\u51d1\0\u0127"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u01d8\0\u5333\0\u536e"+
    "\0\u0127\0\u53a9\0\u0127\0\u0127\0\u53e4\0\u541f\0\u545a\0\u5495"+
    "\0\u54d0\0\u0127\0\u550b\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632"+
    "\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a"+
    "\0\u5845\0\u5880\0\u0127\0\u58bb\0\u0127\0\u58f6\0\u5931\0\u596c"+
    "\0\u0127\0\u59a7\0\u59e2\0\u0127\0\u5a1d\0\u5a58\0\u5a93\0\u5ace"+
    "\0\u0127\0\u5b09\0\u5b44\0\u0127\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30"+
    "\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u0127\0\u5d57\0\u5d92\0\u5dcd"+
    "\0\u5e08\0\u0127\0\u0127\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f"+
    "\0\u0127\0\u5f6a\0\u0127\0\u5fa5\0\u0127\0\u5fe0\0\u601b\0\u6056"+
    "\0\u0127\0\u6091\0\u0127\0\u60cc\0\u0127\0\u6107\0\u0127\0\u6142"+
    "\0\u617d\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\2\11\1\12\1\6\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\6\12\1\21\1\22\3\12"+
    "\1\23\2\12\1\24\1\25\1\12\1\26\1\27\1\30"+
    "\1\12\1\31\11\12\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\6\1\7\1\51\2\11\1\12\1\6"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\6\12\1\21"+
    "\1\22\3\12\1\23\2\12\1\24\1\25\1\12\1\26"+
    "\1\27\1\30\1\12\1\31\11\12\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\7\52\1\53\2\52\1\16"+
    "\1\54\55\52\1\47\3\52\1\55\4\52\1\53\2\52"+
    "\1\16\1\54\55\52\1\47\1\52\3\56\1\57\1\5"+
    "\66\56\74\0\1\7\7\0\1\7\64\0\2\11\67\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\26\12\1\0"+
    "\13\12\15\0\3\60\1\0\3\60\1\0\63\60\1\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\1\12\1\61"+
    "\6\12\1\62\15\12\1\0\13\12\16\0\1\12\3\0"+
    "\2\12\2\0\1\12\2\0\10\12\1\63\15\12\1\0"+
    "\13\12\16\0\1\12\3\0\2\12\2\0\1\12\2\0"+
    "\5\12\1\64\7\12\1\65\10\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\15\12\1\66"+
    "\10\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\16\12\1\67\6\12\1\70\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\21\12"+
    "\1\71\4\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\20\12\1\72\2\12\1\73\2\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\10\12\1\74\15\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\23\12\1\75\2\12"+
    "\1\0\13\12\33\0\1\76\1\77\1\100\1\0\1\101"+
    "\1\0\1\102\1\103\1\104\1\105\2\0\1\106\1\107"+
    "\1\0\1\110\3\0\1\111\1\0\1\112\1\113\3\0"+
    "\1\114\23\0\1\12\3\0\2\12\2\0\1\12\2\0"+
    "\13\12\1\115\12\12\1\0\13\12\16\0\1\12\3\0"+
    "\2\12\2\0\1\12\2\0\4\12\1\116\21\12\1\0"+
    "\13\12\37\0\1\117\1\0\1\120\1\121\24\0\1\122"+
    "\105\0\1\123\5\0\3\51\1\0\67\51\12\52\2\0"+
    "\55\52\1\0\1\52\3\53\1\52\3\53\1\52\2\53"+
    "\2\60\55\53\1\60\1\53\3\55\1\52\6\55\2\51"+
    "\55\55\1\51\1\55\3\56\1\0\67\56\3\0\2\57"+
    "\66\0\3\60\1\0\3\60\1\0\1\124\62\60\1\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\2\12\1\125"+
    "\23\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\12\12\1\126\13\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\11\12\1\127"+
    "\14\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\6\12\1\130\17\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\16\12\1\131"+
    "\7\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\16\12\1\132\7\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\15\12\1\133"+
    "\10\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\21\12\1\134\4\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\10\12\1\135"+
    "\15\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\15\12\1\136\10\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\10\12\1\137"+
    "\15\12\1\0\13\12\41\0\1\140\75\0\1\141\107\0"+
    "\1\142\43\0\1\143\6\0\1\144\20\0\1\145\1\0"+
    "\1\146\1\147\43\0\1\150\7\0\1\151\17\0\1\152"+
    "\41\0\1\153\1\154\5\0\1\155\13\0\1\156\47\0"+
    "\1\157\3\0\1\160\64\0\1\161\5\0\1\162\66\0"+
    "\1\163\3\0\1\164\77\0\1\165\7\0\1\166\53\0"+
    "\1\167\6\0\1\170\70\0\1\171\13\0\1\172\61\0"+
    "\1\173\11\0\1\174\55\0\1\175\3\0\1\176\66\0"+
    "\1\177\44\0\1\12\3\0\2\12\2\0\1\12\2\0"+
    "\17\12\1\200\6\12\1\0\13\12\16\0\1\12\3\0"+
    "\2\12\2\0\1\12\2\0\11\12\1\201\14\12\1\0"+
    "\13\12\35\0\1\202\5\0\1\203\75\0\1\204\62\0"+
    "\1\205\72\0\1\206\52\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\3\12\1\207\22\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\12\12\1\210"+
    "\13\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\10\12\1\211\15\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\17\12\1\212"+
    "\6\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\17\12\1\213\6\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\11\12\1\214"+
    "\14\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\15\12\1\215\10\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\15\12\1\216"+
    "\10\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\6\12\1\217\17\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\15\12\1\220"+
    "\10\12\1\0\13\12\37\0\1\221\74\0\1\222\72\0"+
    "\1\223\1\0\1\224\66\0\1\225\76\0\1\226\77\0"+
    "\1\227\57\0\1\230\105\0\1\231\61\0\1\232\102\0"+
    "\1\233\65\0\1\234\1\235\62\0\1\236\74\0\1\237"+
    "\3\0\1\240\72\0\1\241\67\0\1\242\1\243\74\0"+
    "\1\244\75\0\1\245\65\0\1\246\1\0\1\247\64\0"+
    "\1\250\3\0\1\251\7\0\1\252\20\0\1\253\60\0"+
    "\1\254\53\0\1\255\2\0\1\256\76\0\1\257\1\260"+
    "\64\0\1\261\100\0\1\262\60\0\1\263\77\0\1\264"+
    "\77\0\1\265\104\0\1\266\46\0\1\267\3\0\1\270"+
    "\6\0\1\271\103\0\1\272\61\0\1\273\40\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\15\12\1\274\10\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\26\12\1\0\1\275\12\12\44\0\1\276\63\0"+
    "\1\277\104\0\1\300\64\0\1\301\66\0\1\302\53\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\4\12\1\303"+
    "\21\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\4\12\1\304\21\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\17\12\1\305"+
    "\6\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\25\12\1\306\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\11\12\1\307\14\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\12\12\1\310\13\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\11\12\1\311\14\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\6\12\1\312\17\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\4\12\1\313\21\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\6\12\1\314\17\12\1\0\13\12\37\0\1\315"+
    "\113\0\1\316\60\0\1\317\74\0\1\320\65\0\1\321"+
    "\70\0\1\322\2\0\1\323\107\0\1\324\76\0\1\325"+
    "\50\0\1\326\70\0\1\327\70\0\1\330\7\0\1\331"+
    "\1\332\10\0\1\333\75\0\1\334\47\0\1\335\64\0"+
    "\1\336\76\0\1\337\113\0\1\340\72\0\1\341\50\0"+
    "\1\342\75\0\1\343\117\0\1\344\37\0\1\345\100\0"+
    "\1\346\117\0\1\347\41\0\1\350\76\0\1\351\72\0"+
    "\1\352\72\0\1\353\101\0\1\354\7\0\1\355\62\0"+
    "\1\356\60\0\1\357\103\0\1\360\64\0\1\361\100\0"+
    "\1\362\64\0\1\363\64\0\1\364\102\0\1\365\66\0"+
    "\1\366\74\0\1\367\64\0\1\370\6\0\1\371\65\0"+
    "\1\372\103\0\1\373\65\0\1\374\74\0\1\375\45\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\12\12\1\376"+
    "\13\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\5\12\1\377\20\12\1\0\13\12\43\0"+
    "\1\u0100\73\0\1\u0101\106\0\1\u0102\46\0\1\u0103\54\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\5\12\1\u0104"+
    "\20\12\1\0\13\12\16\0\1\12\3\0\2\12\2\0"+
    "\1\12\2\0\13\12\1\u0105\12\12\1\0\13\12\16\0"+
    "\1\12\3\0\2\12\2\0\1\12\2\0\25\12\1\u0106"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\10\12\1\u0107\15\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\17\12\1\u0108\6\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\12\12\1\u0109\13\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\4\12\1\u010a\21\12"+
    "\1\0\13\12\16\0\1\12\3\0\2\12\2\0\1\12"+
    "\2\0\13\12\1\u010b\12\12\1\0\13\12\16\0\1\12"+
    "\3\0\2\12\2\0\1\12\2\0\4\12\1\u010c\21\12"+
    "\1\0\13\12\60\0\1\u010d\74\0\1\u010e\57\0\1\u010f"+
    "\56\0\1\u0110\100\0\1\u0111\117\0\1\u0112\64\0\1\u0113"+
    "\53\0\1\u0114\73\0\1\u0115\100\0\1\u0116\107\0\1\u0117"+
    "\42\0\1\u0118\103\0\1\u0119\7\0\1\u011a\60\0\1\u011b"+
    "\106\0\1\u011c\56\0\1\u011d\67\0\1\u011e\72\0\1\u011f"+
    "\75\0\1\u0120\71\0\1\u0121\72\0\1\u0122\77\0\1\u0123"+
    "\103\0\1\u0124\54\0\1\u0125\117\0\1\u0126\45\0\1\u0127"+
    "\105\0\1\u0128\60\0\1\u0129\74\0\1\u012a\76\0\1\u012b"+
    "\67\0\1\u012c\75\0\1\u012d\61\0\1\u012e\107\0\1\u012f"+
    "\64\0\1\u0130\100\0\1\u0131\55\0\1\u0132\100\0\1\u0133"+
    "\64\0\1\u0134\77\0\1\u0135\105\0\1\u0136\52\0\1\u0137"+
    "\103\0\1\u0138\63\0\1\u0139\70\0\1\u013a\72\0\1\u013b"+
    "\75\0\1\u013c\106\0\1\u013d\30\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\6\12\1\u013e\17\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\6\12"+
    "\1\u013f\17\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\6\12\1\u0140\17\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\4\12"+
    "\1\u0141\21\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\17\12\1\u0142\6\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\13\12"+
    "\1\u0143\12\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\6\12\1\u0144\17\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\13\12"+
    "\1\u0145\12\12\1\0\13\12\67\0\1\u0146\52\0\1\u0147"+
    "\73\0\1\u0148\72\0\1\u0149\55\0\1\u014a\102\0\1\u014b"+
    "\75\0\1\u014c\112\0\1\u014d\70\0\1\u014e\64\0\1\u014f"+
    "\64\0\1\u0150\61\0\1\u0151\70\0\1\u0152\103\0\1\u0153"+
    "\72\0\1\u0154\72\0\1\u0155\73\0\1\u0156\60\0\1\u0157"+
    "\76\0\1\u0158\72\0\1\u0159\77\0\1\u015a\104\0\1\u015b"+
    "\53\0\1\u015c\72\0\1\u015d\101\0\1\u015e\61\0\1\u015f"+
    "\74\0\1\u0160\67\0\1\u0161\75\0\1\u0162\100\0\1\u0163"+
    "\101\0\1\u0164\56\0\1\u0165\100\0\1\u0166\110\0\1\u0167"+
    "\41\0\1\u0168\116\0\1\u0169\60\0\1\u016a\66\0\1\u016b"+
    "\76\0\1\u016c\66\0\1\u016d\72\0\1\u016e\65\0\1\u016f"+
    "\52\0\1\12\3\0\2\12\2\0\1\12\2\0\15\12"+
    "\1\u0170\10\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\4\12\1\u0171\21\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\6\12"+
    "\1\u0172\17\12\1\0\13\12\16\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\6\12\1\u0173\17\12\1\0\13\12"+
    "\41\0\1\u0174\66\0\1\u0175\77\0\1\u0176\113\0\1\u0177"+
    "\50\0\1\u0178\100\0\1\u0179\66\0\1\u017a\72\0\1\u017b"+
    "\77\0\1\u017c\64\0\1\u017d\117\0\1\u017e\63\0\1\u017f"+
    "\55\0\1\u0180\77\0\1\u0181\103\0\1\u0182\55\0\1\u0183"+
    "\106\0\1\u0184\56\0\1\u0185\72\0\1\u0186\74\0\1\u0187"+
    "\65\0\1\u0188\74\0\1\u0189\70\0\1\u018a\74\0\1\u018b"+
    "\75\0\1\u018c\67\0\1\u018d\65\0\1\u018e\114\0\1\u018f"+
    "\64\0\1\u0190\70\0\1\u0191\40\0\1\12\3\0\2\12"+
    "\2\0\1\12\2\0\6\12\1\u0192\17\12\1\0\13\12"+
    "\16\0\1\12\3\0\2\12\2\0\1\12\2\0\15\12"+
    "\1\u0193\10\12\1\0\13\12\43\0\1\u0194\70\0\1\u0195"+
    "\75\0\1\u0196\63\0\1\u0197\101\0\1\u0198\70\0\1\u0199"+
    "\77\0\1\u019a\64\0\1\u019b\72\0\1\u019c\67\0\1\u019d"+
    "\76\0\1\u019e\72\0\1\u019f\73\0\1\u01a0\75\0\1\u01a1"+
    "\67\0\1\u01a2\107\0\1\u01a3\60\0\1\u01a4\65\0\1\u01a5"+
    "\101\0\1\u01a6\72\0\1\u01a7\63\0\1\u01a8\72\0\1\u01a9"+
    "\67\0\1\u01aa\100\0\1\u01ab\72\0\1\u01ac\61\0\1\u01ad"+
    "\55\0\1\12\3\0\2\12\2\0\1\12\2\0\6\12"+
    "\1\u01ae\17\12\1\0\13\12\50\0\1\u01af\70\0\1\u01b0"+
    "\57\0\1\u01b1\117\0\1\u01b2\76\0\1\u01b3\47\0\1\u01b4"+
    "\100\0\1\u01b5\107\0\1\u01b6\51\0\1\u01b7\77\0\1\u01b8"+
    "\102\0\1\u01b9\53\0\1\u01ba\74\0\1\u01bb\107\0\1\u01bc"+
    "\60\0\1\u01bd\61\0\1\u01be\101\0\1\u01bf\106\0\1\u01c0"+
    "\72\0\1\u01c1\53\0\1\u01c2\72\0\1\u01c3\66\0\1\u01c4"+
    "\115\0\1\u01c5\51\0\1\u01c6\105\0\1\u01c7\100\0\1\u01c8"+
    "\62\0\1\u01c9\55\0\1\u01ca\75\0\1\u01cb\71\0\1\u01cc"+
    "\73\0\1\u01cd\76\0\1\u01ce\76\0\1\u01cf\72\0\1\u01d0"+
    "\70\0\1\u01d1\71\0\1\u01d2\70\0\1\u01d3\70\0\1\u01d4"+
    "\101\0\1\u01d5\62\0\1\u01d6\66\0\1\u01d7\104\0\1\u01d8"+
    "\72\0\1\u01d9\63\0\1\u01da\105\0\1\u01db\66\0\1\u01dc"+
    "\64\0\1\u01dd\114\0\1\u01de\72\0\1\u01df\47\0\1\u01e0"+
    "\123\0\1\u01e1\64\0\1\u01e2\72\0\1\u01e3\45\0\1\u01e4"+
    "\100\0\1\u01e5\77\0\1\u01e6\107\0\1\u01e7\61\0\1\u01e8"+
    "\64\0\1\u01e9\64\0\1\u01ea\100\0\1\u01eb\71\0\1\u01ec"+
    "\73\0\1\u01ed\71\0\1\u01ee\63\0\1\u01ef\116\0\1\u01f0"+
    "\53\0\1\u01f1\100\0\1\u01f2\55\0\1\u01f3\101\0\1\u01f4"+
    "\63\0\1\u01f5\103\0\1\u01f6\64\0\1\u01f7\101\0\1\u01f8"+
    "\67\0\1\u01f9\77\0\1\u01fa\70\0\1\u01fb\64\0\1\u01fc"+
    "\66\0\1\u01fd\77\0\1\u01fe\72\0\1\u01ff\103\0\1\u0200"+
    "\57\0\1\u0201\103\0\1\u0202\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\1\1\1\11\3\1\4\11\15\1"+
    "\6\11\1\1\5\11\3\1\1\11\3\1\1\0\15\1"+
    "\17\0\2\1\4\0\1\11\14\1\23\0\1\11\2\0"+
    "\1\1\11\0\2\1\5\0\12\1\44\0\1\1\6\0"+
    "\2\1\2\0\1\11\2\0\12\1\10\0\1\11\1\0"+
    "\1\1\12\0\2\11\30\0\1\11\1\0\2\1\1\11"+
    "\3\0\11\1\1\0\1\1\11\0\1\11\1\0\1\11"+
    "\4\0\1\1\7\0\1\11\7\0\1\11\12\0\3\11"+
    "\1\0\10\1\4\0\1\11\3\0\2\11\10\0\1\11"+
    "\4\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\5\0\2\11\1\0\1\11\1\0\1\11\4\1\2\11"+
    "\23\0\2\11\7\0\2\1\1\0\1\11\6\0\2\11"+
    "\7\0\1\11\2\0\1\11\5\0\1\1\2\0\1\11"+
    "\1\0\2\11\5\0\1\11\7\0\1\1\10\0\1\11"+
    "\1\0\1\11\3\0\1\11\2\0\1\11\1\0\1\1"+
    "\2\0\1\11\2\0\1\11\10\0\1\11\4\0\2\11"+
    "\5\0\1\11\1\0\1\11\1\0\1\11\3\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[514];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _FormLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1744) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL-1] : zzBufferL.charAt(zzMarkedPosL-1))) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { return FormTokens.LBRACKET  ;
          }
        case 107: break;
        case 51: 
          { yybegin(DIRECTIVE); return FormTokens.IFDEF_DIRECTIVE;
          }
        case 108: break;
        case 35: 
          { return FormTokens.END_KEYWORD;
          }
        case 109: break;
        case 86: 
          { return FormTokens.ENDINSIDE_DIRECTIVE;
          }
        case 110: break;
        case 83: 
          { return FormTokens.CFUNCTIONS_KEYWORD;
          }
        case 111: break;
        case 88: 
          { return FormTokens.PROCEDURE_DIRECTIVE;
          }
        case 112: break;
        case 87: 
          { return FormTokens.TERMINATE_DIRECTIVE;
          }
        case 113: break;
        case 63: 
          { return FormTokens.REMOVE_DIRECTIVE;
          }
        case 114: break;
        case 9: 
          { return FormTokens.QUOTE     ;
          }
        case 115: break;
        case 105: 
          { return FormTokens.SKIPEXTRASYMBOLS_DIRECTIVE;
          }
        case 116: break;
        case 33: 
          { return FormTokens.ELSE_KEYWORD;
          }
        case 117: break;
        case 58: 
          { return FormTokens.TENSORS_KEYWORD;
          }
        case 118: break;
        case 80: 
          { return FormTokens.EXTERNAL_DIRECTIVE;
          }
        case 119: break;
        case 56: 
          { return FormTokens.VECTORS_KEYWORD;
          }
        case 120: break;
        case 100: 
          { return FormTokens.USEDICTIONARY_DIRECTIVE;
          }
        case 121: break;
        case 23: 
          { return FormTokens.LINE_COMMENT;
          }
        case 122: break;
        case 76: 
          { return FormTokens.INCLUDE_DIRECTIVE;
          }
        case 123: break;
        case 57: 
          { return FormTokens.INDICES_KEYWORD;
          }
        case 124: break;
        case 53: 
          { return FormTokens.STORE_KEYWORD;
          }
        case 125: break;
        case 70: 
          { return FormTokens.GLOBAL_KEYWORD;
          }
        case 126: break;
        case 15: 
          { return FormTokens.DIV       ;
          }
        case 127: break;
        case 97: 
          { return FormTokens.FROMEXTERNAL_DIRECTIVE;
          }
        case 128: break;
        case 21: 
          { return FormTokens.BACKQUOTE ;
          }
        case 129: break;
        case 32: 
          { return FormTokens.IF_DIRECTIVE;
          }
        case 130: break;
        case 89: 
          { return FormTokens.TOEXTERNAL_DIRECTIVE;
          }
        case 131: break;
        case 85: 
          { return FormTokens.ENDSWITCH_DIRECTIVE;
          }
        case 132: break;
        case 84: 
          { return FormTokens.SETRANDOM_DIRECTIVE;
          }
        case 133: break;
        case 22: 
          { return FormTokens.TYLDA     ;
          }
        case 134: break;
        case 44: 
          { return FormTokens.SORT_KEYWORD;
          }
        case 135: break;
        case 20: 
          { return FormTokens.QUEST     ;
          }
        case 136: break;
        case 55: 
          { return FormTokens.SYMBOLS_KEYWORD;
          }
        case 137: break;
        case 92: 
          { return FormTokens.PRINTTIMES_DIRECTIVE;
          }
        case 138: break;
        case 30: 
          { return FormTokens.SET_KEYWORD;
          }
        case 139: break;
        case 37: 
          { return FormTokens.SHOW_DIRECTIVE;
          }
        case 140: break;
        case 96: 
          { return FormTokens.ENDPROCEDURE_DIRECTIVE;
          }
        case 141: break;
        case 38: 
          { yybegin(DIRECTIVE); return FormTokens.ELSE_DIRECTIVE;
          }
        case 142: break;
        case 26: 
          { yybegin(YYINITIAL); return FormTokens.WHITE_SPACE;
          }
        case 143: break;
        case 31: 
          { return FormTokens.DO_DIRECTIVE;
          }
        case 144: break;
        case 5: 
          { return FormTokens.WHITE_SPACE;
          }
        case 145: break;
        case 79: 
          { return FormTokens.EXCHANGE_DIRECTIVE;
          }
        case 146: break;
        case 69: 
          { return FormTokens.PREOUT_DIRECTIVE;
          }
        case 147: break;
        case 34: 
          { return FormTokens.ADD_DIRECTIVE;
          }
        case 148: break;
        case 24: 
          { return FormTokens.REGULAR_STRING_PART;
          }
        case 149: break;
        case 64: 
          { yybegin(DIRECTIVE); return FormTokens.DEFINE_DIRECTIVE;
          }
        case 150: break;
        case 71: 
          { return FormTokens.CTENSORS_KEYWORD;
          }
        case 151: break;
        case 77: 
          { return FormTokens.FUNCTIONS_KEYWORD;
          }
        case 152: break;
        case 54: 
          { return FormTokens.CLEAR_KEYWORD;
          }
        case 153: break;
        case 4: 
          { return FormTokens.MUL       ;
          }
        case 154: break;
        case 8: 
          { return FormTokens.RBRACKET  ;
          }
        case 155: break;
        case 82: 
          { return FormTokens.UNDEFINE_DIRECTIVE;
          }
        case 156: break;
        case 48: 
          { yybegin(DIRECTIVE); return FormTokens.ENDIF_DIRECTIVE;
          }
        case 157: break;
        case 104: 
          { return FormTokens.CLOSEDICTIONARY_DIRECTIVE;
          }
        case 158: break;
        case 19: 
          { return FormTokens.SEMICOLON ;
          }
        case 159: break;
        case 43: 
          { return FormTokens.LOCAL_KEYWORD;
          }
        case 160: break;
        case 27: 
          { return FormTokens.ID_KEYWORD;
          }
        case 161: break;
        case 36: 
          { return FormTokens.ENDIF_KEYWORD;
          }
        case 162: break;
        case 17: 
          { return FormTokens.EQ        ;
          }
        case 163: break;
        case 45: 
          { return FormTokens.ELSEIF_KEYWORD;
          }
        case 164: break;
        case 39: 
          { return FormTokens.CALL_DIRECTIVE;
          }
        case 165: break;
        case 11: 
          { return FormTokens.LPAR      ;
          }
        case 166: break;
        case 102: 
          { return FormTokens.REVERSEINCLUDE_DIRECTIVE;
          }
        case 167: break;
        case 75: 
          { return FormTokens.DEFAULT_DIRECTIVE;
          }
        case 168: break;
        case 101: 
          { return FormTokens.OPENDICTIONARY_DIRECTIVE;
          }
        case 169: break;
        case 47: 
          { return FormTokens.ENDDO_DIRECTIVE;
          }
        case 170: break;
        case 78: 
          { return FormTokens.OPTIMIZE_DIRECTIVE;
          }
        case 171: break;
        case 95: 
          { return FormTokens.RMSEPARATOR_DIRECTIVE;
          }
        case 172: break;
        case 72: 
          { return FormTokens.NTENSORS_KEYWORD;
          }
        case 173: break;
        case 28: 
          { return FormTokens.IF_KEYWORD;
          }
        case 174: break;
        case 41: 
          { return FormTokens.PIPE_DIRECTIVE;
          }
        case 175: break;
        case 99: 
          { return FormTokens.CLEAROPTIMIZE_DIRECTIVE;
          }
        case 176: break;
        case 14: 
          { return FormTokens.MINUS     ;
          }
        case 177: break;
        case 67: 
          { return FormTokens.APPEND_DIRECTIVE;
          }
        case 178: break;
        case 103: 
          { return FormTokens.SETEXTERNALATTR_DIRECTIVE;
          }
        case 179: break;
        case 40: 
          { return FormTokens.CASE_DIRECTIVE;
          }
        case 180: break;
        case 65: 
          { return FormTokens.INSIDE_DIRECTIVE;
          }
        case 181: break;
        case 61: 
          { return FormTokens.ELSEIF_DIRECTIVE;
          }
        case 182: break;
        case 3: 
          { return FormTokens.INTEGER_LITERAL;
          }
        case 183: break;
        case 74: 
          { return FormTokens.BREAKDO_DIRECTIVE;
          }
        case 184: break;
        case 42: 
          { return FormTokens.PRINT_KEYWORD;
          }
        case 185: break;
        case 6: 
          { return FormTokens.IDENTIFIER;
          }
        case 186: break;
        case 68: 
          { return FormTokens.PROMPT_DIRECTIVE;
          }
        case 187: break;
        case 59: 
          { return FormTokens.SYSTEM_DIRECTIVE;
          }
        case 188: break;
        case 49: 
          { return FormTokens.CLOSE_DIRECTIVE;
          }
        case 189: break;
        case 29: 
          { return FormTokens.EQEQ      ;
          }
        case 190: break;
        case 1: 
          { return FormTokens.DIRECTIVE_CONTENT;
          }
        case 191: break;
        case 50: 
          { return FormTokens.RESET_DIRECTIVE;
          }
        case 192: break;
        case 46: 
          { return FormTokens.BREAK_DIRECTIVE;
          }
        case 193: break;
        case 93: 
          { return FormTokens.SETEXTERNAL_DIRECTIVE;
          }
        case 194: break;
        case 81: 
          { return FormTokens.REDEFINE_DIRECTIVE;
          }
        case 195: break;
        case 13: 
          { return FormTokens.PLUS      ;
          }
        case 196: break;
        case 90: 
          { return FormTokens.RMEXTERNAL_DIRECTIVE;
          }
        case 197: break;
        case 73: 
          { return FormTokens.MESSAGE_DIRECTIVE;
          }
        case 198: break;
        case 18: 
          { return FormTokens.COMMA     ;
          }
        case 199: break;
        case 25: 
          { yybegin(YYINITIAL); return FormTokens.CLOSING_QUOTE;
          }
        case 200: break;
        case 66: 
          { yybegin(DIRECTIVE); return FormTokens.IFNDEF_DIRECTIVE;
          }
        case 201: break;
        case 62: 
          { return FormTokens.CREATE_DIRECTIVE;
          }
        case 202: break;
        case 10: 
          { yybegin(STRING); return FormTokens.OPEN_QUOTE;
          }
        case 203: break;
        case 60: 
          { return FormTokens.SWITCH_DIRECTIVE;
          }
        case 204: break;
        case 12: 
          { return FormTokens.RPAR      ;
          }
        case 205: break;
        case 106: 
          { return FormTokens.PROCEDUREEXTENSION_DIRECTIVE;
          }
        case 206: break;
        case 52: 
          { return FormTokens.WRITE_DIRECTIVE;
          }
        case 207: break;
        case 16: 
          { return FormTokens.POWER     ;
          }
        case 208: break;
        case 91: 
          { return FormTokens.FACTDOLLAR_DIRECTIVE;
          }
        case 209: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.BAD_CHARACTER;
          }
        case 210: break;
        case 94: 
          { return FormTokens.COMMENTCHAR_DIRECTIVE;
          }
        case 211: break;
        case 98: 
          { return FormTokens.ADDSEPARATOR_DIRECTIVE;
          }
        case 212: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
